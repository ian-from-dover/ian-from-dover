set nocp

" Owner: Hong Yi En, Ian <ianfromdover>
" Last Change: 21 Dec 2022 (works in Rider)
" Why: Add Canary Mode indicator to Lightline, 
"      fix cw not working after canary mode disabled.
" Next Improvements:
"   - word counter (make it toggle-able after)

" -----------------------
" -- Essential Options --
" -----------------------

syntax on         " on colours
set re=0          " set regexp engine automatically, makes syntax on c++ files work
set encoding=utf-8
set rnu           " relative line numbers
set ruler         " show cursor's (row, col)
set showmatch     " show matching parentheses
set cc=80         " colorcolumn at 80 chars length
set so=5          " always show 5 lines around the cursor for context (scrolloff)
set backspace=eol,start,indent " allow backspacing over indent,eol,start in insert mode 

" set t_Co=256    " disabled because it makes vim on powershell ugly

" escape with .,
imap ., <Esc>
cnoremap ., <C-C>

" when escaping, make cursor stay in the same position
autocmd InsertLeave * :normal! `^
set virtualedit=onemore

" stop the whole screen from flashing when cursor reaches end of page or cannot find search results
set noerrorbells  " don't beep
set visualbell    " instead of beeping, blink vim window
set t_vb=         " if (visualbell enabled), vim wont flash or beep. else, does nothing

" indentation help
set smarttab      " start the line according to shiftwidth, not tabstop. i believe it lets del remove the 2x spaces
set autoindent
set smartindent
set linebreak     " if line too long, soft-wrap its display to the next line
set expandtab     " <tab> expands into spaces instead
set tabstop=4    " <tab> becomes 4 spaces
set shiftwidth=0 " autoindent is 4 spaces

" file handling
filetype plugin indent on " enables plugin per filetype & enables auto-indent per filetype
set showcmd       " shows partial command on last line of screen
set nobackup      " both of these to not create a backup

" Searching 
set hls           " highlight search matches
set is            " Inclusive Search: show partial matches as you type
set wildmenu      " show autocomplete options in command mode

" enable clicking mouse to place cursor and enter visual mode
set mouse+=a



" ---------------------------------------
" -- Load Plugins and Custom Functions --
" ---------------------------------------

" ---- Custom Functions ----
" Lets user use original vim bindings with Ian's modified Canary keyboard input
let g:isincanarymode = 0
function ToggleCanary()
    if g:isincanarymode ==# 0
        " unmap home position qwerty movement
        unmap j
        unmap k
        unmap l
        unmap ;

        " pattern:
        " canary key -> qwerty vim command
        " movement
        noremap n h
        noremap e j
        noremap i k
        noremap a l

        noremap l w
        noremap q b
        noremap y e
        noremap b n
        noremap B N

        noremap h m
        noremap m '
        noremap M "
        
        " enter insert mode
        noremap o i
        noremap O I
        noremap c a
        noremap C A
        noremap u o
        noremap U O
        noremap r s
        noremap R S
        noremap p r
        noremap P R

        " editing
        noremap d c
        noremap D C
        noremap s d
        noremap S D
        noremap z y
        noremap Z Y
        noremap ' p
        noremap " P
        noremap f u
        noremap v x
        noremap N J

        " others
            " macros (@@ is repeat last macro)
        noremap x q
            " quick file opening and closing, folds
        noremap j z
        noremap J Z
        noremap JJ ZZ
            " enter visual mode
        noremap w v
        noremap W V

        " t, f not used

        let g:isincanarymode = 1
        echom "-- CANARY ENABLED --"
    else
        unmap n
        unmap e
        unmap i
        unmap a

        unmap l
        unmap q
        unmap y
        unmap b
        unmap B

        unmap h
        unmap m
        unmap M
        
        " enter insert mode
        unmap o
        unmap O
        unmap c
        unmap C
        unmap u
        unmap U
        unmap r
        unmap R
        unmap p
        unmap P

        " editing
        unmap d
        unmap D
        unmap s
        unmap S
        unmap z
        unmap Z
        unmap '
        unmap "
        unmap f
        unmap v
        unmap N

        " others
            " macros (@@ is repeat last macro)
        unmap x
            " quick file opening and closing, folds
        unmap j
        unmap J
        unmap JJ
            " enter visual mode
        unmap w
        unmap W

        " move QWERTY movements to home row
        noremap j h
        noremap k j
        noremap l k
        noremap ; l

        let g:isincanarymode = 0
        echom "-- CANARY DISABLED --"
    endif
endfunction

" Enable vim-plug
" Note: if installing for the first time, download plug.vim from junegunn/vim-plug/master/plug.vim
" Note: after pasting this vimrc, run :PlugInstall to install the plugins

call plug#begin('~/.vim/plugged')
" call plug#begin('~/vimfiles/plugged') is the proper way for windows, but i
" am lazy and i just let it create a new .vim folder for the plugins files

" ---- Plugins ----
Plug 'dense-analysis/ale'       " lint, go do definition, find references
Plug 'ackyshake/VimCompletesMe' " tab completion
Plug 'tpope/vim-fugitive'       " README: https://github.com/tpope/vim-fugitive
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'         " README: https://github.com/junegunn/fzf.vim
Plug 'itchyny/lightline.vim'    " pretty status line

call plug#end() " init plugin systems

" ---- Plugin Options ----
set laststatus=2 " enable lightline
set showmode   " enable -- INSERT -- for Rider


let g:lightline = {
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'readonly', 'filename' ],
    \             [ 'canarymode' ],
    \             [ 'gitbranch' ] ],
    \   'right': [ [ 'lineinfo' ],
    \              [ 'wordcount', 'percent' ],
    \              [ 'fileformat', 'fileencoding', 'filetype' ] ]
    \ },
    \ 'component_function': {
    \   'filename': 'LightlineFilename',
    \   'wordcount': 'LightlineWordCount',
    \   'canarymode': 'LightlineCanaryMode',
    \   'gitbranch': 'FugitiveHead',
    \   'fileformat': 'LightlineFileformat',
    \   'fileencoding': 'LightlineFileencoding',
    \   'filetype': 'LightlineFiletype'
    \ },
    \ }
  
    " Hides file format
    function! LightlineFileformat()
      return ''
    endfunction

    " Hides file encoding
    function! LightlineFileencoding()
      return ''
    endfunction

    " Hides filetype on short windows
    function! LightlineFiletype()
      return winwidth(0) > 50 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    " Custom modified sign
    function! LightlineFilename()
      let filename = expand('%:t') !=# '' ? expand('%:t') : 'Untitled'
      let modified = &modified ? ' [+]' : ''
      return filename . modified
    endfunction

    " Displays 'C' with yellow bg when using canary mode
    function! LightlineCanaryMode()
      return g:isincanarymode ==# 1 ? 'C' : ''
    endfunction

    function! LightlineWordCount()
        if &filetype ==# 'markdown' || &filetype ==# 'text'
            return CountWords()
        else
            return ''
        endif
    endfunction
    " Displays the word count for selected file types
    " Referenced from https://www.vivi.sh/blog/technical/live-wordcount-vim-airline/index
    function! CountWords()
        let position = getpos(".")
        exe ":silent normal g\<c-g>"
        let stat = v:statusmsg
        let s:word_count = 0
        if stat !=# '--No lines in buffer--'
            if mode() ==# "V"
                let s:word_count = str2nr(split(stat)[5])
            else
                let s:word_count = str2nr(split(stat)[11])
            endif
        endif
        call setpos('.', position)
        return s:word_count
    endfunction


" ---------------------
" -- Custom Mappings --
" ---------------------
    " see ide shortcuts here: https://github.com/ianfromdover/ianfromdover/tree/main/ide
    " == leader bindings ==
    " LD-L clear highlights
    " LD-CN toggle canary mode
    " LD-B toggle prev buffer
    " LD-W toggle btwn windows
    " LD-O reveal in finder
    " LD-Z open vsplit term
    " LD-B toggle prev buffer
    "
    " - plugins -
    " LD-G fzf (global)
    " LD-P fzf (git) (C-V for vs, C-X for sp)
    " LD-BL buffer list with fzf (:bd 2 closes buffer 2)
    " LD-Y Git commit tree
    " LD-LD Search everywhere (Ag)
    " Ale:
    " LD-S rename
    " LD-D definition
    " LD-F find usages
    " LD-H toggle linting



" ---- Normal Mappings ----
" set movement to home positions when canary mode is not on yet
noremap j h
noremap k j
noremap l k
noremap ; l

" Space: leader
let mapleader = " "

" I HAVENT FOUND OUT HOW TO MAKE THE LETTERS RECURSE
" So, if the user is using canary, they must type the leader sequence in canary
"
" Solutions:
" idea 1: find out the text mode using leader is
" idea 2: put the mappings below into a function, when
"       canary mode is on or off, call the function again

" Lead_L: Clears search highlighting. <CR> means Hit Return
nmap <silent> <leader>l :let @/ = ""<CR>

" Lead_CN: Toggle Canary mode
nmap <leader>cn :call ToggleCanary()<Cr>

" Lead_B: Previous Buffer
nmap <leader>b :bp<Cr>

" Lead_W: Toggle between windows
nmap <leader>w <C-w>p

" Lead_O: Reveal in Finder
" replace . with current file variable (google how to get)
nmap <leader>o :!open .<Cr>

" Lead_Z: Terminal
nmap <leader>z :vert ter<Cr>



" ---- Plugin Mappings ----
" Lead_G: Global FZF, Ctrl-V for vs, Ctrl-X for sp.
nmap <leader>g :Files<Cr>

" Lead_P: (git) FZF. Ctrl-V for vs, Ctrl-X for sp.
nmap <leader>p :GFiles<Cr>

" Lead_BL: FZF Buffer List
" :bd 2 to close buffer 2
nmap <leader>bl :Buffers<Cr>

" Lead_Lead: (git) Search Everywhere
nmap <leader><leader> :Ag<Cr>

" Lead_Y: Git Commit Tree
nmap <leader>y :Commits<Cr>

" ALE commands
    " Lead_S: rename
    " Lead_D: definition
    " Lead_F: find usages
    " Lead_H: toggle linting
nmap <leader>s :ALERename<Cr>
nmap <leader>d :ALEGoToDefinition<Cr>
nmap <leader>f :ALEFindReferences<Cr>
nmap <leader>h :ALEToggle<Cr>

" ---- End of File ----

